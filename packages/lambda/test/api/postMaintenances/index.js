// Code generated by generate-maintenance-handler. DO NOT EDIT.
/* eslint-disable */
import assert from 'assert'
import sinon from 'sinon'
import { handle } from 'api/postMaintenances'
import SNS from 'aws/sns'
import MaintenancesStore from 'db/maintenances'
import MaintenanceUpdatesStore from 'db/maintenanceUpdates'
import { Maintenance, MaintenanceUpdate } from 'model/maintenances'
import { maintenanceStatuses } from 'utils/const'

describe('postMaintenances', () => {
  beforeEach(() => {
    sinon.stub(SNS.prototype, 'notifyEvent')
    sinon.stub(Maintenance.prototype, 'validateExceptEventID')
  })

  afterEach(() => {
    MaintenancesStore.prototype.create.restore()
    MaintenanceUpdatesStore.prototype.create.restore()
    SNS.prototype.notifyEvent.restore()
    Maintenance.prototype.validateExceptEventID.restore()
  })

  const createMaintenanceMock = maintenance => {
    maintenance.setEventID('1')
    return maintenance
  }

  const createMaintenanceUpdateMock = maintenanceUpdate => {
    maintenanceUpdate.setEventUpdateID('1')
    return maintenanceUpdate
  }

  it('should create the maintenance', async () => {
    const createMaintenanceStub = sinon.stub(MaintenancesStore.prototype, 'create', createMaintenanceMock)
    const createMaintenanceUpdateStub = sinon.stub(MaintenanceUpdatesStore.prototype, 'create', createMaintenanceUpdateMock)

    await handle({ name: 'test', status: maintenanceStatuses[0] }, null, (error, result) => {
      assert(error === null)

      assert(result.maintenanceID !== undefined)
      assert(result.maintenanceUpdates.length === 1)
      assert(result.maintenanceUpdates[0].maintenanceUpdateID !== undefined)
    })
    assert(createMaintenanceStub.calledOnce)
    assert(createMaintenanceStub.firstCall.args[0] instanceof Maintenance)

    assert(createMaintenanceUpdateStub.calledOnce)
    assert(createMaintenanceUpdateStub.firstCall.args[0] instanceof MaintenanceUpdate)
  })

  it('should return validation error if event is invalid', async () => {
    sinon.stub(MaintenancesStore.prototype, 'create').returns()
    sinon.stub(MaintenanceUpdatesStore.prototype, 'create').returns()

    return await handle({}, null, (error, result) => {
      assert(error.match(/invalid/))
    })
  })

  it('should return error on exception thrown', async () => {
    sinon.stub(MaintenancesStore.prototype, 'create').throws()
    sinon.stub(MaintenanceUpdatesStore.prototype, 'create').returns()

    return await handle({}, null, (error, result) => {
      assert(error.match(/Error/))
    })
  })
})
